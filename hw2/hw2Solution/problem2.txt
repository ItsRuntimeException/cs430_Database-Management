Exercise 3.8 Answer each of the following questions briefly. The questions are based
on the following relational schema:

Emp(eid: integer, ename: string, age: integer, salary: real)
Works(eid: integer, did: integer, pcttime: integer)
Dept(did: integer, dname: string, budget: real, managerid: integer)

1. Give an example of a foreign key constraint that involves the Dept relation. What
are the options for enforcing this constraint when a user attempts to delete a Dept
tuple?

A constraint could be created such that for every did in Works there is a
matching did in Dept.  The way to enforce this constraint is to make sure
that the table is properly created:

Note: there are two possible answers here for DELETE actions: ON DELETE
CASCADE or the default ON DELETE NO ACTION (i.e. this text or lack of it)

CREATE TABLE Works ( eid INTEGER,   
                     did INTEGER,
                     pct_time INTEGER,
                     PRIMARY KEY (eid, did),
                     FOREIGN KEY (did) REFERENCES Dept
                                 ON DELETE CASCADE);

Note that a test was performed on Oracle: [NOT REQUIRED]

SQL> CREATE TABLE WorksTest ( eid INTEGER,
                     did INTEGER,
                     pcttime INTEGER,
                     PRIMARY KEY (eid, did),
                     FOREIGN KEY (did) REFERENCES Dept
                                 ON DELETE CASCADE);
  2    3    4    5    6     
Table created.

SQL> 

The options for enforcing the constraint are:
When a deletion of a dept row is attempte:
1) ON DELETE CASCADE: Also delete all works tuples that refer to it.
2) Nothing extra, or NO ACTION: Do not allow deletion if a works tuple refers to it.

There are other possibilities, only briefly noted in the text (pg. 71)
so not expected in this answer, but their inclusion is OK:
3) ON DELETE SET DEFAULT For every works tuple that refers to it, use the default did.
Needs a default clause in the did column definition in the create table for dept.
4) ON DELETE SET NULL For every works tuple that refers to it, set the did field to
null.  This one is not useful here since the did is the PK of department
and thus cannot be null. 

2. Write the SQL statements required to create the preceding relations,
including appropriate versions of all primary and foreign key integrity
constraints.

--OK to use statements from createdb.sql here--

CREATE TABLE Emp ( eid INTEGER,
                     ename VARCHAR(20),
                     age INTEGER,
                     salary REAL,  -- or decimal(10,2)
                     PRIMARY KEY (eid));

CREATE TABLE Works ( eid INTEGER,
                     did INTEGER,
                     pct_time INTEGER,
                     PRIMARY KEY (eid, did),
                     CONSTRAINT Eid_FKey
                                FOREIGN KEY (eid) REFERENCES Emp,
                     CONSTRAINT Did_FKey
                                FOREIGN KEY (did) REFERENCES Dept
				                  ON DELETE CASCADE);

Note: constraint names are not required, but they are a good idea.

CREATE TABLE Dept ( did INTEGER,
                    dname VARCHAR(20),
                    budget REAL,
                    managerid INTEGER,
                    PRIMARY KEY (did),
                    CONSTRAINT Man_Key
                               FOREIGN KEY (managerid) REFERENCES Emp
                              ON DELETE SET NULL); --or use default action

Note that ON DELETE CASCADE is not wanted here: if the manager leaves
as an employee, we don't want the whole department to be dropped!

4. Write an SQL statement to add John Doe as an employee with eid = 101, age =
32 and salary = 15, 000.

INSERT INTO Emp
VALUES (101, 'John Doe', 32, 15000);

5. Write an SQL statement to give every employee a 10 percent raise.

UPDATE Emp E
SET E.salary = E.salary * 1.10;

6. Write an SQL statement to delete the Toy (changed to Legal) department. Given the referential
integrity constraints you chose for this schema, explain what happens when this
statement is executed.

DELETE
FROM Dept D
WHERE D.dname = 'Legal';

When this statement is executed, not only will the row with the dname Legal in
it be removed but the row(s) in Works with that did will also be removed
because the modifier ON DELETE CASCADE was used.

Further discussion, not needed in student solution: The standard load
has 3 such rows of works, ones with 3 in the did column. This means
that 3 employees no longer are associated with that department. 
In fact these 3 employees now have no associated department, but there is
no constraint requiring mandatory participation, so the database
allows this delete to proceed. 


